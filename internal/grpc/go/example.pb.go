// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: example.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ticker) Reset() {
	*x = Ticker{}
	mi := &file_example_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticker) ProtoMessage() {}

func (x *Ticker) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticker.ProtoReflect.Descriptor instead.
func (*Ticker) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{0}
}

func (x *Ticker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Share data is a JSON object
type ShareData struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	Data                              []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Phone                             string                 `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	CompanyOfficers                   []string               `protobuf:"bytes,3,rep,name=companyOfficers,proto3" json:"companyOfficers,omitempty"`
	ExecutiveTeam                     []string               `protobuf:"bytes,4,rep,name=executiveTeam,proto3" json:"executiveTeam,omitempty"`
	MaxAge                            int32                  `protobuf:"varint,5,opt,name=maxAge,proto3" json:"maxAge,omitempty"`
	PriceHint                         int32                  `protobuf:"varint,6,opt,name=priceHint,proto3" json:"priceHint,omitempty"`
	PreviousClose                     float32                `protobuf:"fixed32,7,opt,name=previousClose,proto3" json:"previousClose,omitempty"`
	Open                              float32                `protobuf:"fixed32,8,opt,name=open,proto3" json:"open,omitempty"`
	DayLow                            float32                `protobuf:"fixed32,9,opt,name=dayLow,proto3" json:"dayLow,omitempty"`
	DayHigh                           float32                `protobuf:"fixed32,10,opt,name=dayHigh,proto3" json:"dayHigh,omitempty"`
	RegularMarketPreviousClose        float32                `protobuf:"fixed32,11,opt,name=regularMarketPreviousClose,proto3" json:"regularMarketPreviousClose,omitempty"`
	RegularMarketOpen                 float32                `protobuf:"fixed32,12,opt,name=regularMarketOpen,proto3" json:"regularMarketOpen,omitempty"`
	RegularMarketDayLow               float32                `protobuf:"fixed32,13,opt,name=regularMarketDayLow,proto3" json:"regularMarketDayLow,omitempty"`
	RegularMarketDayHigh              float32                `protobuf:"fixed32,14,opt,name=regularMarketDayHigh,proto3" json:"regularMarketDayHigh,omitempty"`
	TrailingPE                        float32                `protobuf:"fixed32,15,opt,name=trailingPE,proto3" json:"trailingPE,omitempty"`
	Volume                            int32                  `protobuf:"varint,16,opt,name=volume,proto3" json:"volume,omitempty"`
	RegularMarketVolume               int32                  `protobuf:"varint,17,opt,name=regularMarketVolume,proto3" json:"regularMarketVolume,omitempty"`
	AverageVolume                     int32                  `protobuf:"varint,18,opt,name=averageVolume,proto3" json:"averageVolume,omitempty"`
	AverageVolume10Days               int32                  `protobuf:"varint,19,opt,name=averageVolume10days,proto3" json:"averageVolume10days,omitempty"`
	AverageDailyVolume10Day           int32                  `protobuf:"varint,20,opt,name=averageDailyVolume10Day,proto3" json:"averageDailyVolume10Day,omitempty"`
	Bid                               float32                `protobuf:"fixed32,21,opt,name=bid,proto3" json:"bid,omitempty"`
	Ask                               float32                `protobuf:"fixed32,22,opt,name=ask,proto3" json:"ask,omitempty"`
	BidSize                           float32                `protobuf:"fixed32,23,opt,name=bidSize,proto3" json:"bidSize,omitempty"` // TODO: Figure this one out
	AskSize                           float32                `protobuf:"fixed32,24,opt,name=askSize,proto3" json:"askSize,omitempty"` // TODO: Figure this one out
	Yield                             float32                `protobuf:"fixed32,25,opt,name=yield,proto3" json:"yield,omitempty"`
	TotalAssets                       int64                  `protobuf:"varint,26,opt,name=totalAssets,proto3" json:"totalAssets,omitempty"`
	FiftyTwoWeekLow                   float32                `protobuf:"fixed32,27,opt,name=fiftyTwoWeekLow,proto3" json:"fiftyTwoWeekLow,omitempty"`
	FiftyTwoWeekHigh                  float32                `protobuf:"fixed32,28,opt,name=fiftyTwoWeekHigh,proto3" json:"fiftyTwoWeekHigh,omitempty"`
	FiftyDayAverage                   float32                `protobuf:"fixed32,29,opt,name=fiftyDayAverage,proto3" json:"fiftyDayAverage,omitempty"`
	TwoHundredDayAverage              float32                `protobuf:"fixed32,30,opt,name=twoHundredDayAverage,proto3" json:"twoHundredDayAverage,omitempty"`
	NavPrice                          float32                `protobuf:"fixed32,31,opt,name=navPrice,proto3" json:"navPrice,omitempty"`
	Currency                          string                 `protobuf:"bytes,32,opt,name=currency,proto3" json:"currency,omitempty"`
	Tradeable                         bool                   `protobuf:"varint,33,opt,name=tradeable,proto3" json:"tradeable,omitempty"`
	YtdReturn                         float32                `protobuf:"fixed32,34,opt,name=ytdReturn,proto3" json:"ytdReturn,omitempty"`
	Beta3Year                         float32                `protobuf:"fixed32,35,opt,name=beta3Year,proto3" json:"beta3Year,omitempty"`
	FundFamily                        string                 `protobuf:"bytes,36,opt,name=fundFamily,proto3" json:"fundFamily,omitempty"`
	FundInceptionDate                 int64                  `protobuf:"varint,37,opt,name=fundInceptionDate,proto3" json:"fundInceptionDate,omitempty"`
	LegalType                         string                 `protobuf:"bytes,38,opt,name=legalType,proto3" json:"legalType,omitempty"`
	ThreeYearAverageReturn            float32                `protobuf:"fixed32,39,opt,name=threeYearAverageReturn,proto3" json:"threeYearAverageReturn,omitempty"`
	FiveYearAverageReturn             float32                `protobuf:"fixed32,40,opt,name=fiveYearAverageReturn,proto3" json:"fiveYearAverageReturn,omitempty"`
	QuoteType                         string                 `protobuf:"bytes,41,opt,name=quoteType,proto3" json:"quoteType,omitempty"`
	Symbol                            string                 `protobuf:"bytes,42,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Language                          string                 `protobuf:"bytes,43,opt,name=language,proto3" json:"language,omitempty"`
	Region                            string                 `protobuf:"bytes,44,opt,name=region,proto3" json:"region,omitempty"`
	TypeDisp                          string                 `protobuf:"bytes,45,opt,name=typeDisp,proto3" json:"typeDisp,omitempty"`
	QuoteSourceName                   string                 `protobuf:"bytes,46,opt,name=quoteSourceName,proto3" json:"quoteSourceName,omitempty"`
	Triggerable                       bool                   `protobuf:"varint,47,opt,name=triggerable,proto3" json:"triggerable,omitempty"`
	CustomPriceAlertConfidence        string                 `protobuf:"bytes,48,opt,name=customPriceAlertConfidence,proto3" json:"customPriceAlertConfidence,omitempty"`
	MarketState                       string                 `protobuf:"bytes,49,opt,name=marketState,proto3" json:"marketState,omitempty"`
	CorporateActions                  []string               `protobuf:"bytes,50,rep,name=corporateActions,proto3" json:"corporateActions,omitempty"`
	RegularMarketTime                 int64                  `protobuf:"varint,51,opt,name=regularMarketTime,proto3" json:"regularMarketTime,omitempty"`
	Exchange                          string                 `protobuf:"bytes,52,opt,name=exchange,proto3" json:"exchange,omitempty"`
	MessageBoardId                    string                 `protobuf:"bytes,53,opt,name=messageBoardId,proto3" json:"messageBoardId,omitempty"`
	ExchangeTimezoneName              string                 `protobuf:"bytes,54,opt,name=exchangeTimezoneName,proto3" json:"exchangeTimezoneName,omitempty"`
	ExchangeTimezoneShortName         string                 `protobuf:"bytes,55,opt,name=exchangeTimezoneShortName,proto3" json:"exchangeTimezoneShortName,omitempty"`
	GmtOffSetMilliseconds             int64                  `protobuf:"varint,56,opt,name=gmtOffSetMilliseconds,proto3" json:"gmtOffSetMilliseconds,omitempty"`
	Market                            string                 `protobuf:"bytes,57,opt,name=market,proto3" json:"market,omitempty"`
	EsgPopulated                      bool                   `protobuf:"varint,58,opt,name=esgPopulated,proto3" json:"esgPopulated,omitempty"`
	FullExchangeName                  string                 `protobuf:"bytes,59,opt,name=fullExchangeName,proto3" json:"fullExchangeName,omitempty"`
	AverageDailyVolume3Month          int32                  `protobuf:"varint,60,opt,name=averageDailyVolume3Month,proto3" json:"averageDailyVolume3Month,omitempty"`
	FiftyTwoWeekLowChange             float32                `protobuf:"fixed32,61,opt,name=fiftyTwoWeekLowChange,proto3" json:"fiftyTwoWeekLowChange,omitempty"`
	FiftyTwoWeekLowChangePercent      float32                `protobuf:"fixed32,62,opt,name=fiftyTwoWeekLowChangePercent,proto3" json:"fiftyTwoWeekLowChangePercent,omitempty"`
	FiftyTwoWeekRange                 string                 `protobuf:"bytes,63,opt,name=fiftyTwoWeekRange,proto3" json:"fiftyTwoWeekRange,omitempty"`
	FiftyTwoWeekHighChange            float32                `protobuf:"fixed32,64,opt,name=fiftyTwoWeekHighChange,proto3" json:"fiftyTwoWeekHighChange,omitempty"`
	FiftyTwoWeekHighChangePercent     float32                `protobuf:"fixed32,65,opt,name=fiftyTwoWeekHighChangePercent,proto3" json:"fiftyTwoWeekHighChangePercent,omitempty"`
	FiftyTwoWeekChangePercent         float32                `protobuf:"fixed32,66,opt,name=fiftyTwoWeekChangePercent,proto3" json:"fiftyTwoWeekChangePercent,omitempty"`
	DividendYield                     float32                `protobuf:"fixed32,67,opt,name=dividendYield,proto3" json:"dividendYield,omitempty"`
	TrailingThreeMonthReturns         float32                `protobuf:"fixed32,68,opt,name=trailingThreeMonthReturns,proto3" json:"trailingThreeMonthReturns,omitempty"`
	TrailingThreeMonthNavReturns      float32                `protobuf:"fixed32,69,opt,name=trailingThreeMonthNavReturns,proto3" json:"trailingThreeMonthNavReturns,omitempty"`
	NetAssets                         float64                `protobuf:"fixed64,70,opt,name=netAssets,proto3" json:"netAssets,omitempty"`
	EpsTrailingTwelveMonths           float32                `protobuf:"fixed32,71,opt,name=epsTrailingTwelveMonths,proto3" json:"epsTrailingTwelveMonths,omitempty"`
	HasPrePostMarketData              bool                   `protobuf:"varint,72,opt,name=hasPrePostMarketData,proto3" json:"hasPrePostMarketData,omitempty"`
	FirstTradeDateMilliseconds        int64                  `protobuf:"varint,73,opt,name=firstTradeDateMilliseconds,proto3" json:"firstTradeDateMilliseconds,omitempty"`
	RegularMarketChange               float32                `protobuf:"fixed32,74,opt,name=regularMarketChange,proto3" json:"regularMarketChange,omitempty"`
	RegularMarketDayRange             string                 `protobuf:"bytes,75,opt,name=regularMarketDayRange,proto3" json:"regularMarketDayRange,omitempty"`
	ShortName                         string                 `protobuf:"bytes,76,opt,name=shortName,proto3" json:"shortName,omitempty"`
	LongName                          string                 `protobuf:"bytes,77,opt,name=longName,proto3" json:"longName,omitempty"`
	RegularMarketChangePercent        float32                `protobuf:"fixed32,78,opt,name=regularMarketChangePercent,proto3" json:"regularMarketChangePercent,omitempty"`
	RegularMarketPrice                float32                `protobuf:"fixed32,79,opt,name=regularMarketPrice,proto3" json:"regularMarketPrice,omitempty"`
	TwoHundredDayAverageChange        float32                `protobuf:"fixed32,80,opt,name=twoHundredDayAverageChange,proto3" json:"twoHundredDayAverageChange,omitempty"`
	TwoHundredDayAverageChangePercent float32                `protobuf:"fixed32,81,opt,name=twoHundredDayAverageChangePercent,proto3" json:"twoHundredDayAverageChangePercent,omitempty"`
	NetExpenseRatio                   float32                `protobuf:"fixed32,82,opt,name=netExpenseRatio,proto3" json:"netExpenseRatio,omitempty"`
	SourceInterval                    int32                  `protobuf:"varint,83,opt,name=sourceInterval,proto3" json:"sourceInterval,omitempty"`
	ExchangeDataDelayedBy             int32                  `protobuf:"varint,84,opt,name=exchangeDataDelayedBy,proto3" json:"exchangeDataDelayedBy,omitempty"`
	FiftyDayAverageChange             float32                `protobuf:"fixed32,85,opt,name=fiftyDayAverageChange,proto3" json:"fiftyDayAverageChange,omitempty"`
	FiftyDayAverageChangePercent      float32                `protobuf:"fixed32,86,opt,name=fiftyDayAverageChangePercent,proto3" json:"fiftyDayAverageChangePercent,omitempty"`
	CryptoTradeable                   bool                   `protobuf:"varint,87,opt,name=cryptoTradeable,proto3" json:"cryptoTradeable,omitempty"`
	TrailingPegRatio                  string                 `protobuf:"bytes,88,opt,name=trailingPegRatio,proto3" json:"trailingPegRatio,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *ShareData) Reset() {
	*x = ShareData{}
	mi := &file_example_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareData) ProtoMessage() {}

func (x *ShareData) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareData.ProtoReflect.Descriptor instead.
func (*ShareData) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{1}
}

func (x *ShareData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ShareData) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ShareData) GetCompanyOfficers() []string {
	if x != nil {
		return x.CompanyOfficers
	}
	return nil
}

func (x *ShareData) GetExecutiveTeam() []string {
	if x != nil {
		return x.ExecutiveTeam
	}
	return nil
}

func (x *ShareData) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *ShareData) GetPriceHint() int32 {
	if x != nil {
		return x.PriceHint
	}
	return 0
}

func (x *ShareData) GetPreviousClose() float32 {
	if x != nil {
		return x.PreviousClose
	}
	return 0
}

func (x *ShareData) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *ShareData) GetDayLow() float32 {
	if x != nil {
		return x.DayLow
	}
	return 0
}

func (x *ShareData) GetDayHigh() float32 {
	if x != nil {
		return x.DayHigh
	}
	return 0
}

func (x *ShareData) GetRegularMarketPreviousClose() float32 {
	if x != nil {
		return x.RegularMarketPreviousClose
	}
	return 0
}

func (x *ShareData) GetRegularMarketOpen() float32 {
	if x != nil {
		return x.RegularMarketOpen
	}
	return 0
}

func (x *ShareData) GetRegularMarketDayLow() float32 {
	if x != nil {
		return x.RegularMarketDayLow
	}
	return 0
}

func (x *ShareData) GetRegularMarketDayHigh() float32 {
	if x != nil {
		return x.RegularMarketDayHigh
	}
	return 0
}

func (x *ShareData) GetTrailingPE() float32 {
	if x != nil {
		return x.TrailingPE
	}
	return 0
}

func (x *ShareData) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ShareData) GetRegularMarketVolume() int32 {
	if x != nil {
		return x.RegularMarketVolume
	}
	return 0
}

func (x *ShareData) GetAverageVolume() int32 {
	if x != nil {
		return x.AverageVolume
	}
	return 0
}

func (x *ShareData) GetAverageVolume10Days() int32 {
	if x != nil {
		return x.AverageVolume10Days
	}
	return 0
}

func (x *ShareData) GetAverageDailyVolume10Day() int32 {
	if x != nil {
		return x.AverageDailyVolume10Day
	}
	return 0
}

func (x *ShareData) GetBid() float32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *ShareData) GetAsk() float32 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *ShareData) GetBidSize() float32 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *ShareData) GetAskSize() float32 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

func (x *ShareData) GetYield() float32 {
	if x != nil {
		return x.Yield
	}
	return 0
}

func (x *ShareData) GetTotalAssets() int64 {
	if x != nil {
		return x.TotalAssets
	}
	return 0
}

func (x *ShareData) GetFiftyTwoWeekLow() float32 {
	if x != nil {
		return x.FiftyTwoWeekLow
	}
	return 0
}

func (x *ShareData) GetFiftyTwoWeekHigh() float32 {
	if x != nil {
		return x.FiftyTwoWeekHigh
	}
	return 0
}

func (x *ShareData) GetFiftyDayAverage() float32 {
	if x != nil {
		return x.FiftyDayAverage
	}
	return 0
}

func (x *ShareData) GetTwoHundredDayAverage() float32 {
	if x != nil {
		return x.TwoHundredDayAverage
	}
	return 0
}

func (x *ShareData) GetNavPrice() float32 {
	if x != nil {
		return x.NavPrice
	}
	return 0
}

func (x *ShareData) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ShareData) GetTradeable() bool {
	if x != nil {
		return x.Tradeable
	}
	return false
}

func (x *ShareData) GetYtdReturn() float32 {
	if x != nil {
		return x.YtdReturn
	}
	return 0
}

func (x *ShareData) GetBeta3Year() float32 {
	if x != nil {
		return x.Beta3Year
	}
	return 0
}

func (x *ShareData) GetFundFamily() string {
	if x != nil {
		return x.FundFamily
	}
	return ""
}

func (x *ShareData) GetFundInceptionDate() int64 {
	if x != nil {
		return x.FundInceptionDate
	}
	return 0
}

func (x *ShareData) GetLegalType() string {
	if x != nil {
		return x.LegalType
	}
	return ""
}

func (x *ShareData) GetThreeYearAverageReturn() float32 {
	if x != nil {
		return x.ThreeYearAverageReturn
	}
	return 0
}

func (x *ShareData) GetFiveYearAverageReturn() float32 {
	if x != nil {
		return x.FiveYearAverageReturn
	}
	return 0
}

func (x *ShareData) GetQuoteType() string {
	if x != nil {
		return x.QuoteType
	}
	return ""
}

func (x *ShareData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ShareData) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ShareData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ShareData) GetTypeDisp() string {
	if x != nil {
		return x.TypeDisp
	}
	return ""
}

func (x *ShareData) GetQuoteSourceName() string {
	if x != nil {
		return x.QuoteSourceName
	}
	return ""
}

func (x *ShareData) GetTriggerable() bool {
	if x != nil {
		return x.Triggerable
	}
	return false
}

func (x *ShareData) GetCustomPriceAlertConfidence() string {
	if x != nil {
		return x.CustomPriceAlertConfidence
	}
	return ""
}

func (x *ShareData) GetMarketState() string {
	if x != nil {
		return x.MarketState
	}
	return ""
}

func (x *ShareData) GetCorporateActions() []string {
	if x != nil {
		return x.CorporateActions
	}
	return nil
}

func (x *ShareData) GetRegularMarketTime() int64 {
	if x != nil {
		return x.RegularMarketTime
	}
	return 0
}

func (x *ShareData) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *ShareData) GetMessageBoardId() string {
	if x != nil {
		return x.MessageBoardId
	}
	return ""
}

func (x *ShareData) GetExchangeTimezoneName() string {
	if x != nil {
		return x.ExchangeTimezoneName
	}
	return ""
}

func (x *ShareData) GetExchangeTimezoneShortName() string {
	if x != nil {
		return x.ExchangeTimezoneShortName
	}
	return ""
}

func (x *ShareData) GetGmtOffSetMilliseconds() int64 {
	if x != nil {
		return x.GmtOffSetMilliseconds
	}
	return 0
}

func (x *ShareData) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *ShareData) GetEsgPopulated() bool {
	if x != nil {
		return x.EsgPopulated
	}
	return false
}

func (x *ShareData) GetFullExchangeName() string {
	if x != nil {
		return x.FullExchangeName
	}
	return ""
}

func (x *ShareData) GetAverageDailyVolume3Month() int32 {
	if x != nil {
		return x.AverageDailyVolume3Month
	}
	return 0
}

func (x *ShareData) GetFiftyTwoWeekLowChange() float32 {
	if x != nil {
		return x.FiftyTwoWeekLowChange
	}
	return 0
}

func (x *ShareData) GetFiftyTwoWeekLowChangePercent() float32 {
	if x != nil {
		return x.FiftyTwoWeekLowChangePercent
	}
	return 0
}

func (x *ShareData) GetFiftyTwoWeekRange() string {
	if x != nil {
		return x.FiftyTwoWeekRange
	}
	return ""
}

func (x *ShareData) GetFiftyTwoWeekHighChange() float32 {
	if x != nil {
		return x.FiftyTwoWeekHighChange
	}
	return 0
}

func (x *ShareData) GetFiftyTwoWeekHighChangePercent() float32 {
	if x != nil {
		return x.FiftyTwoWeekHighChangePercent
	}
	return 0
}

func (x *ShareData) GetFiftyTwoWeekChangePercent() float32 {
	if x != nil {
		return x.FiftyTwoWeekChangePercent
	}
	return 0
}

func (x *ShareData) GetDividendYield() float32 {
	if x != nil {
		return x.DividendYield
	}
	return 0
}

func (x *ShareData) GetTrailingThreeMonthReturns() float32 {
	if x != nil {
		return x.TrailingThreeMonthReturns
	}
	return 0
}

func (x *ShareData) GetTrailingThreeMonthNavReturns() float32 {
	if x != nil {
		return x.TrailingThreeMonthNavReturns
	}
	return 0
}

func (x *ShareData) GetNetAssets() float64 {
	if x != nil {
		return x.NetAssets
	}
	return 0
}

func (x *ShareData) GetEpsTrailingTwelveMonths() float32 {
	if x != nil {
		return x.EpsTrailingTwelveMonths
	}
	return 0
}

func (x *ShareData) GetHasPrePostMarketData() bool {
	if x != nil {
		return x.HasPrePostMarketData
	}
	return false
}

func (x *ShareData) GetFirstTradeDateMilliseconds() int64 {
	if x != nil {
		return x.FirstTradeDateMilliseconds
	}
	return 0
}

func (x *ShareData) GetRegularMarketChange() float32 {
	if x != nil {
		return x.RegularMarketChange
	}
	return 0
}

func (x *ShareData) GetRegularMarketDayRange() string {
	if x != nil {
		return x.RegularMarketDayRange
	}
	return ""
}

func (x *ShareData) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *ShareData) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *ShareData) GetRegularMarketChangePercent() float32 {
	if x != nil {
		return x.RegularMarketChangePercent
	}
	return 0
}

func (x *ShareData) GetRegularMarketPrice() float32 {
	if x != nil {
		return x.RegularMarketPrice
	}
	return 0
}

func (x *ShareData) GetTwoHundredDayAverageChange() float32 {
	if x != nil {
		return x.TwoHundredDayAverageChange
	}
	return 0
}

func (x *ShareData) GetTwoHundredDayAverageChangePercent() float32 {
	if x != nil {
		return x.TwoHundredDayAverageChangePercent
	}
	return 0
}

func (x *ShareData) GetNetExpenseRatio() float32 {
	if x != nil {
		return x.NetExpenseRatio
	}
	return 0
}

func (x *ShareData) GetSourceInterval() int32 {
	if x != nil {
		return x.SourceInterval
	}
	return 0
}

func (x *ShareData) GetExchangeDataDelayedBy() int32 {
	if x != nil {
		return x.ExchangeDataDelayedBy
	}
	return 0
}

func (x *ShareData) GetFiftyDayAverageChange() float32 {
	if x != nil {
		return x.FiftyDayAverageChange
	}
	return 0
}

func (x *ShareData) GetFiftyDayAverageChangePercent() float32 {
	if x != nil {
		return x.FiftyDayAverageChangePercent
	}
	return 0
}

func (x *ShareData) GetCryptoTradeable() bool {
	if x != nil {
		return x.CryptoTradeable
	}
	return false
}

func (x *ShareData) GetTrailingPegRatio() string {
	if x != nil {
		return x.TrailingPegRatio
	}
	return ""
}

var File_example_proto protoreflect.FileDescriptor

var file_example_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x1c, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x1d, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x48,
	0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x61, 0x79, 0x4c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x64, 0x61, 0x79, 0x4c, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x48, 0x69, 0x67,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x61, 0x79, 0x48, 0x69, 0x67, 0x68,
	0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x79, 0x4c, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x79, 0x4c, 0x6f, 0x77,
	0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x79, 0x48, 0x69, 0x67, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x79,
	0x48, 0x69, 0x67, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x45, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x45, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x30, 0x64, 0x61, 0x79, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x31, 0x30, 0x64, 0x61, 0x79, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x30, 0x44, 0x61,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x30, 0x44, 0x61, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b,
	0x4c, 0x6f, 0x77, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x66, 0x69, 0x66, 0x74, 0x79,
	0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69,
	0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65,
	0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x66, 0x74, 0x79, 0x44,
	0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x66, 0x69, 0x66, 0x74, 0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x74, 0x77, 0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44, 0x61,
	0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x74, 0x77, 0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x76, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x61, 0x76, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x74,
	0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x79,
	0x74, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x61,
	0x33, 0x59, 0x65, 0x61, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x65, 0x74,
	0x61, 0x33, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x65, 0x65, 0x59, 0x65, 0x61, 0x72, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x16, 0x74, 0x68, 0x72, 0x65, 0x65, 0x59, 0x65, 0x61, 0x72, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69,
	0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x66, 0x69, 0x76, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x6d, 0x74, 0x4f, 0x66, 0x66, 0x53, 0x65,
	0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x67, 0x6d, 0x74, 0x4f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x73, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x73, 0x67, 0x50, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x34,
	0x0a, 0x15, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x66,
	0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f,
	0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x66, 0x69, 0x66, 0x74,
	0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x66, 0x74,
	0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65,
	0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54,
	0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f,
	0x57, 0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x1d, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x69,
	0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57,
	0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f,
	0x57, 0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77,
	0x6f, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x76, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x4e, 0x61, 0x76, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x70, 0x73, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x65, 0x70, 0x73, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x77, 0x6f, 0x48,
	0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x74, 0x77,
	0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x77, 0x6f, 0x48,
	0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x21, 0x74, 0x77, 0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44,
	0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x52, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x6e, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x53, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x66, 0x69, 0x66, 0x74, 0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x66,
	0x69, 0x66, 0x74, 0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x66, 0x69, 0x66, 0x74, 0x79, 0x44, 0x61, 0x79,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x66, 0x69, 0x66, 0x74,
	0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x45,
	0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x50, 0x49, 0x12, 0x39, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x0f,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x1a,
	0x12, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_example_proto_rawDescOnce sync.Once
	file_example_proto_rawDescData []byte
)

func file_example_proto_rawDescGZIP() []byte {
	file_example_proto_rawDescOnce.Do(func() {
		file_example_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_example_proto_rawDesc), len(file_example_proto_rawDesc)))
	})
	return file_example_proto_rawDescData
}

var file_example_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_example_proto_goTypes = []any{
	(*Ticker)(nil),    // 0: example.Ticker
	(*ShareData)(nil), // 1: example.ShareData
}
var file_example_proto_depIdxs = []int32{
	0, // 0: example.ShareAPI.GetDataForTicker:input_type -> example.Ticker
	1, // 1: example.ShareAPI.GetDataForTicker:output_type -> example.ShareData
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_example_proto_init() }
func file_example_proto_init() {
	if File_example_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_example_proto_rawDesc), len(file_example_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_example_proto_goTypes,
		DependencyIndexes: file_example_proto_depIdxs,
		MessageInfos:      file_example_proto_msgTypes,
	}.Build()
	File_example_proto = out.File
	file_example_proto_goTypes = nil
	file_example_proto_depIdxs = nil
}
