// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: shareProfileAllocator.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ticker) Reset() {
	*x = Ticker{}
	mi := &file_shareProfileAllocator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticker) ProtoMessage() {}

func (x *Ticker) ProtoReflect() protoreflect.Message {
	mi := &file_shareProfileAllocator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticker.ProtoReflect.Descriptor instead.
func (*Ticker) Descriptor() ([]byte, []int) {
	return file_shareProfileAllocator_proto_rawDescGZIP(), []int{0}
}

func (x *Ticker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Share data is a JSON object
type ShareData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Ask                  float64                `protobuf:"fixed64,1,opt,name=ask,proto3" json:"ask,omitempty"`
	Pe                   float64                `protobuf:"fixed64,2,opt,name=pe,proto3" json:"pe,omitempty"`
	Nav                  float64                `protobuf:"fixed64,3,opt,name=nav,proto3" json:"nav,omitempty"`
	MarketCap            int64                  `protobuf:"varint,4,opt,name=market_cap,json=marketCap,proto3" json:"market_cap,omitempty"`
	Volume               int64                  `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Symbol               string                 `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	DividendYield        float64                `protobuf:"fixed64,8,opt,name=dividend_yield,json=dividendYield,proto3" json:"dividend_yield,omitempty"`
	LongName             string                 `protobuf:"bytes,9,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
	LongBusinessSummary  string                 `protobuf:"bytes,10,opt,name=long_business_summary,json=longBusinessSummary,proto3" json:"long_business_summary,omitempty"`
	Address1             string                 `protobuf:"bytes,11,opt,name=address1,proto3" json:"address1,omitempty"`
	Address2             string                 `protobuf:"bytes,12,opt,name=address2,proto3" json:"address2,omitempty"`
	City                 string                 `protobuf:"bytes,13,opt,name=city,proto3" json:"city,omitempty"`
	State                string                 `protobuf:"bytes,14,opt,name=state,proto3" json:"state,omitempty"`
	Zip                  string                 `protobuf:"bytes,15,opt,name=zip,proto3" json:"zip,omitempty"`
	Country              string                 `protobuf:"bytes,16,opt,name=country,proto3" json:"country,omitempty"`
	PhoneNumber          string                 `protobuf:"bytes,17,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Website              string                 `protobuf:"bytes,18,opt,name=website,proto3" json:"website,omitempty"`
	Industry             string                 `protobuf:"bytes,19,opt,name=industry,proto3" json:"industry,omitempty"`
	Sector               string                 `protobuf:"bytes,20,opt,name=sector,proto3" json:"sector,omitempty"`
	ExchangeName         string                 `protobuf:"bytes,21,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`
	Region               string                 `protobuf:"bytes,22,opt,name=region,proto3" json:"region,omitempty"`
	NumFullTimeEmployees int64                  `protobuf:"varint,23,opt,name=num_full_time_employees,json=numFullTimeEmployees,proto3" json:"num_full_time_employees,omitempty"`
	CompanyOfficers      []string               `protobuf:"bytes,24,rep,name=company_officers,json=companyOfficers,proto3" json:"company_officers,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ShareData) Reset() {
	*x = ShareData{}
	mi := &file_shareProfileAllocator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareData) ProtoMessage() {}

func (x *ShareData) ProtoReflect() protoreflect.Message {
	mi := &file_shareProfileAllocator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareData.ProtoReflect.Descriptor instead.
func (*ShareData) Descriptor() ([]byte, []int) {
	return file_shareProfileAllocator_proto_rawDescGZIP(), []int{1}
}

func (x *ShareData) GetAsk() float64 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *ShareData) GetPe() float64 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *ShareData) GetNav() float64 {
	if x != nil {
		return x.Nav
	}
	return 0
}

func (x *ShareData) GetMarketCap() int64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *ShareData) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ShareData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ShareData) GetDividendYield() float64 {
	if x != nil {
		return x.DividendYield
	}
	return 0
}

func (x *ShareData) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *ShareData) GetLongBusinessSummary() string {
	if x != nil {
		return x.LongBusinessSummary
	}
	return ""
}

func (x *ShareData) GetAddress1() string {
	if x != nil {
		return x.Address1
	}
	return ""
}

func (x *ShareData) GetAddress2() string {
	if x != nil {
		return x.Address2
	}
	return ""
}

func (x *ShareData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ShareData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ShareData) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *ShareData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ShareData) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ShareData) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *ShareData) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *ShareData) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *ShareData) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *ShareData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ShareData) GetNumFullTimeEmployees() int64 {
	if x != nil {
		return x.NumFullTimeEmployees
	}
	return 0
}

func (x *ShareData) GetCompanyOfficers() []string {
	if x != nil {
		return x.CompanyOfficers
	}
	return nil
}

var File_shareProfileAllocator_proto protoreflect.FileDescriptor

var file_shareProfileAllocator_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xa4, 0x05, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61,
	0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x61, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6e, 0x61, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x6e, 0x67, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x7a, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x46, 0x75, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x73, 0x32, 0x61, 0x0a, 0x08, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x41, 0x50, 0x49, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x42, 0x1c, 0x5a, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_shareProfileAllocator_proto_rawDescOnce sync.Once
	file_shareProfileAllocator_proto_rawDescData []byte
)

func file_shareProfileAllocator_proto_rawDescGZIP() []byte {
	file_shareProfileAllocator_proto_rawDescOnce.Do(func() {
		file_shareProfileAllocator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_shareProfileAllocator_proto_rawDesc), len(file_shareProfileAllocator_proto_rawDesc)))
	})
	return file_shareProfileAllocator_proto_rawDescData
}

var file_shareProfileAllocator_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_shareProfileAllocator_proto_goTypes = []any{
	(*Ticker)(nil),    // 0: shareprofileallocator.Ticker
	(*ShareData)(nil), // 1: shareprofileallocator.ShareData
}
var file_shareProfileAllocator_proto_depIdxs = []int32{
	0, // 0: shareprofileallocator.ShareAPI.GetDataForTicker:input_type -> shareprofileallocator.Ticker
	1, // 1: shareprofileallocator.ShareAPI.GetDataForTicker:output_type -> shareprofileallocator.ShareData
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_shareProfileAllocator_proto_init() }
func file_shareProfileAllocator_proto_init() {
	if File_shareProfileAllocator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_shareProfileAllocator_proto_rawDesc), len(file_shareProfileAllocator_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_shareProfileAllocator_proto_goTypes,
		DependencyIndexes: file_shareProfileAllocator_proto_depIdxs,
		MessageInfos:      file_shareProfileAllocator_proto_msgTypes,
	}.Build()
	File_shareProfileAllocator_proto = out.File
	file_shareProfileAllocator_proto_goTypes = nil
	file_shareProfileAllocator_proto_depIdxs = nil
}
